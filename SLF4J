```
POM.xml
        <exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
        
<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
    
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
     *Spring은 기본적으로 아파치 재단의 commons-logging을 이용해 로그를 남긴다.Logback 라이브러리로 로그를 남기려면 commons-logging이 사용되지 않도록 설정을 해야 한다.
      그런데 Spring은 내부적으로 commons-logging을 찾아 로깅을 하려고 해서, commons-logging을 사용하지 못하도록 설정하면 ClassNotFoundException이 발생한다.
     이 문제를 해결하기 위해, SLF4J에서 제공하는 jcl-over-slf4j 라이브러리를 추가한 것이다.
      jcl-over-slf4j는 commons-logging과 동일한 구조를 가진 라이브러리이며, 내부적으로 SLF4J를 사용하여 로그를 남긴다.
      
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>
    * logback-classic 라이브러리를 추가했다면 slf4j 라이브러리를 추가하지 않아도 자동으로 설치가 된다.(slf4j-api에 의존성을 가지고있음.)
    
		<dependency>
			<groupId>org.logback-extensions</groupId>
			<artifactId>logback-ext-spring</artifactId>
			<version>0.1.2</version>
		</dependency>
    -logback 설정하기
    SLF4J는 로그를 남기기 위한 공통 인터페이스이다.
    SLF4J로 logback 라이브러리를 이용하여 로그를 남기는 것이므로, 실제 로그를 남기는 것은 logback 라이브러리다.그래서 logback 설정을 해줘야 한다.
    
    
    
    *Appender는 어디에 어떤 포맷으로 로그를 남길 것인지 정할 수 있는 방법을 제공한다.
     -ConsoleAppender는 콘솔에 로그를 어떤 포맷으로 출력할지 설정할 때 사용하는 것.
          <configuration  scan="true" scanPeriod="10 seconds">
        <appender name="CONSOL" class="ch.qos.logback.core.ConsoleAppender">
          <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%d{HH:mm:ss.SSS} *로그가 출력되는 시간이 출력된다. 중괄호{ } 안은 이 시간의 포맷이다.
            [%thread]  * 쓰레드 별로 로그를 남길수 있다.
            %-5level *로그 레벨을 5의 고정폭 값으로 출력하라는 것을 의미한다.
            %logger * logger의 이름을 축약해서 출력한다. 
            %m%n</Pattern> * 로그를 출력할 형태의 포맷을 지정한다.
          </layout>
        </appender>
        
        -FileAppender는 파일에 로그를 어떤 포맷으로 출력할지 설정할 때 사용한다.
        -RollingFileAppender는 로그 양이 많아지면 하나의 파일로 관리하기가 어려워진다. 이런 문제를 방지하기 위해 하루 단위로 로그 파일을 백업하면서 로그를 남기고자 할 때 사용할 수 있다.
          <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
           
           *지정된 입계 값 아래 이벤트를 필터링 한다. 임계값보다 낮은 레벨의 경우 이벤트는 거부된다.
             <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>DEBUG</level>
              </filter>
            
            *파일이 언제 백업될지 결정짓는 내용들이 있다.
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
             
            *년, 월, 일에 대한 정보를 가지는 로그 파일(fileNamePattern 요소 안의 내용)이 최대 30개(maxHistory 요소의 내용) 생성된다. 
              <FileNamePattern>D:/QuadMax/webapp/log/quadmax.%d{yyyy-MM-dd}.log.zip</FileNamePattern> 
              <maxHistory>30</maxHistory>
              
            </rollingPolicy>
            <layout class="ch.qos.logback.classic.PatternLayout">
              <!-- <Pattern>%d{yyyy-MM-DD HH:mm:ss.SSS}
              %-5level 
              %logger{36}        *중괄호{ } 안에는 length이다. 최대 자릿수를 의미한다.
              - %msg%n</Pattern> *%message의 alias로, 사용자가 출력한 메시지가 출력된다.
              <Pattern>%d{yyyy-MM-dd HH:mm:ss} *로깅 이벤트의 날짜를 출력하는 데 사용됩니다.
              %-5p  * 로깅 이벤트의 우선 순위를 출력하는 데 사용됩니다.
              %c{1} * 로깅 요청을 발행하는 호출자의 완전한 클래스 이름을 출력하는 데 사용됩니다."org.apache.xyz.SomeClass"의 경우 패턴 % C {1} 는 "SomeClass"를 출력
              :%L   * 로깅 이벤트를 생성 한 호출자의 위치 정보를 출력하는 데 사용됩니다.
              - %m  * 로깅 요청이 발행 된 메소드 이름을 출력하는 데 사용됩니다.
                %n  * 줄 구분  
              </Pattern>
            </layout>
          </appender>
          
          Log Level (아래쪽으로 갈수록 심각한 오류를 의미한다)
          1.trace
          2.debug
          3.info
          4.warn
          5.error
          <appender name="ERRORFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>ERROR</level>
            </filter>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
              <FileNamePattern>D:/QuadMax/webapp/log/quadmax_error.%d{yyyy-MM-dd}.log.zip</FileNamePattern>
              <maxHistory>30</maxHistory>
            </rollingPolicy>
            <layout class="ch.qos.logback.classic.PatternLayout">
              <!-- <Pattern>%d{yyyy-MM-DD HH:mm:ss.SSS} %-5level %logger{36} - %msg%n</Pattern> -->
              <Pattern>%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n</Pattern>
            </layout>
          </appender>
          
          	<logger name="com" level="DEBUG" />
            <logger name="org.springframework" level="ERROR" />
            <logger name="org.springframework.transaction" level="INFO" />
            <logger name="jdbc.sqltiming" level="DEBUG" />
            
            
            <root level="DEBUG">
              <appender-ref ref="CONSOL" />
            </root>
            <root level="ERROR">
              <appender-ref ref="ERRORFILE" />
            </root>
            <root level="ERROR">
              <appender-ref ref="FILE" />
            </root>
            *root 태그에 설정을 한다면, 모든 대상에 CONSOLE, FILE , ERRORFILE Appender를 적용하라는 의미이다.
            이렇게 하면 콘솔과 파일로 두 번 로그를 출력하게 된다.
